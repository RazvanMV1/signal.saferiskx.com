// src/features/discord-service/api.js
const apiUrl = process.env.REACT_APP_API_URL;

// Ob»õine subscription-ul utilizatorului
export const getSubscription = async () => {
  try {
    console.log('üîç Fetching subscription from:', `${apiUrl}/api/user/subscription`);
    
    const response = await fetch(`${apiUrl}/api/user/subscription`, {
      method: 'GET',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('üì° Subscription response status:', response.status);

    // DacƒÉ utilizatorul nu are abonament (404), returneazƒÉ null
    if (response.status === 404) {
      console.log('‚ÑπÔ∏è User has no subscription');
      return null;
    }

    // DacƒÉ nu este autentificat (401), aruncƒÉ eroare pentru redirect la login
    if (response.status === 401) {
      console.log('üîí User not authenticated');
      throw new Error('Not authenticated');
    }

    // Pentru alte erori
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('‚ùå API Error:', response.status, errorData);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ Subscription data received:', {
      status: data.status,
      nextPaymentDate: data.nextPaymentDate,
      stripeCustomerId: data.stripeCustomerId ? 'present' : 'missing'
    });
    
    return data;
  } catch (error) {
    console.error('‚ùå Error fetching subscription:', error);
    
    // Re-throw authentication errors pentru handling √Æn component
    if (error.message === 'Not authenticated') {
      throw error;
    }
    
    // Pentru alte erori, returneazƒÉ null (user fƒÉrƒÉ abonament)
    return null;
  }
};

// CreeazƒÉ sesiune Stripe pentru platƒÉ
export const createStripeSession = async () => {
  try {
    console.log('üí≥ Creating Stripe session...');
    
    const response = await fetch(`${apiUrl}/api/stripe/create-session`, {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      }
      // Nu mai trimitem body pentru cƒÉ avem un singur tip de abonament
    });

    console.log('üì° Create session response status:', response.status);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('‚ùå Create session error:', response.status, errorData);
      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ Stripe session created successfully');
    
    return data;
  } catch (error) {
    console.error('‚ùå Error creating Stripe session:', error);
    throw error;
  }
};

// Ob»õine statusul Discord al utilizatorului
export const getDiscordStatus = async () => {
  try {
    console.log('üéÆ Fetching Discord status...');
    
    const response = await fetch(`${apiUrl}/api/discord/status`, {
      method: 'GET',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('üì° Discord status response:', response.status);

    if (response.status === 401) {
      console.log('üîí User not authenticated for Discord status');
      throw new Error('Not authenticated');
    }

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('‚ùå Discord status error:', response.status, errorData);
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ Discord status received:', {
      connected: data.connected,
      inGuild: data.inGuild,
      hasPremiumRole: data.hasPremiumRole,
      hasActiveSubscription: data.hasActiveSubscription
    });
    
    return data;
  } catch (error) {
    console.error('‚ùå Error fetching Discord status:', error);
    throw error;
  }
};

// Ini»õiazƒÉ procesul Discord OAuth
export const initiateDiscordAuth = async () => {
  try {
    console.log('üîó Initiating Discord OAuth...');
    
    const response = await fetch(`${apiUrl}/api/discord/auth/initiate`, {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('üì° Discord auth initiate response:', response.status);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('‚ùå Discord auth initiate error:', response.status, errorData);
      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ Discord OAuth URL received');
    
    return data;
  } catch (error) {
    console.error('‚ùå Error initiating Discord auth:', error);
    throw error;
  }
};

// ProceseazƒÉ callback-ul Discord OAuth
export const handleDiscordCallback = async (code) => {
  try {
    console.log('üîÑ Processing Discord callback...');
    
    const response = await fetch(`${apiUrl}/api/discord/auth/callback`, {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ code })
    });

    console.log('üì° Discord callback response:', response.status);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('‚ùå Discord callback error:', response.status, errorData);
      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ Discord callback processed successfully');
    
    return data;
  } catch (error) {
    console.error('‚ùå Error processing Discord callback:', error);
    throw error;
  }
};

// AdaugƒÉ aceastƒÉ func»õie √Æn api.js
export const disconnectDiscord = async () => {
  try {
    const response = await fetch(`${apiUrl}/api/discord/disconnect`, {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Eroare la deconectarea Discord');
    }

    return await response.json();
  } catch (error) {
    console.error('‚ùå Error disconnecting Discord:', error);
    throw error;
  }
};

// Force sync Discord status (pentru admin/debugging)
export const forceSyncDiscord = async () => {
  try {
    console.log('üîÑ Force syncing Discord...');
    
    const response = await fetch(`${apiUrl}/api/discord/force-sync`, {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('üì° Discord force sync response:', response.status);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('‚ùå Discord force sync error:', response.status, errorData);
      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ Discord force sync completed');
    
    return data;
  } catch (error) {
    console.error('‚ùå Error force syncing Discord:', error);
    throw error;
  }
};

// Test Discord enrollment (pentru debugging)
export const testDiscordEnrollment = async () => {
  try {
    console.log('üß™ Testing Discord enrollment...');
    
    const response = await fetch(`${apiUrl}/api/discord/test-enrollment`, {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('üì° Discord test enrollment response:', response.status);

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      console.error('‚ùå Discord test enrollment error:', response.status, errorData);
      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    console.log('‚úÖ Discord enrollment test completed');
    
    return data;
  } catch (error) {
    console.error('‚ùå Error testing Discord enrollment:', error);
    throw error;
  }
};
